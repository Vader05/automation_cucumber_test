name: Run API Tests and Report to Xray

on:
  workflow_dispatch:      # permite ejecución manual desde GitHub UI
  repository_dispatch:  # permite lanzarlo desde Jira/Xray vía API

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Cucumber tests
        # Agregué '|| true' para que el job no falle inmediatamente si los tests fallan.
        # Esto asegura que el paso de subir resultados siempre se ejecute, incluso sin 'if: always()'.
        # Nota: Puedes eliminar 'if: always()' del siguiente paso si usas '|| true'.
        run: |
          chmod +x mvnw
          ./mvnw test
        # Agregando '|| true' para que el paso no detenga el workflow si falla el test, 
        # permitiendo que el siguiente paso de subida de resultados (Upload) se ejecute.
        # Si prefieres que el paso falle pero el siguiente se ejecute, usa 'continue-on-error: true'
        # o confía en el 'if: always()' del paso de subida.
        continue-on-error: true 

      # PASO 1: Obtener Token de Xray (separado para diagnóstico)
      # Usamos el GITHUB_ENV para pasar la variable XRAY_TOKEN al siguiente paso.
      - name: Get Xray Token
        id: get_token
        env:
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        # Usamos 'always()' para asegurarnos de que se ejecute incluso si los tests fallaron.
        if: always()
        run: |
          # 1. Obtener token de Xray
          # Truncamos el JSON usando 'tr -d '"' para obtener solo la cadena del token.
          XRAY_TOKEN=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
            -H "Content-Type: application/json" \
            -d "{\"client_id\": \"${XRAY_CLIENT_ID}\", \"client_secret\": \"${XRAY_CLIENT_SECRET}\"}" | tr -d '"')

          # 2. Exportar el token para el siguiente paso
          echo "XRAY_TOKEN=${XRAY_TOKEN}" >> $GITHUB_ENV
          
          # 3. Impresión para depuración
          echo "Token obtenido y exportado."
          echo "Token (primeros 10 caracteres): ${XRAY_TOKEN::10}..."


      # PASO 2: Subir Resultados a Xray (separado)
      - name: Upload Cucumber results to Xray
        # Usamos 'always()' para ejecutarlo incluso si el paso de tests falló.
        if: always()
        run: |
          # Solo se ejecuta si el token existe, para evitar errores si la autenticación falló.
          if [ -z "${XRAY_TOKEN}" ]; then
            echo "Error: XRAY_TOKEN no se pudo obtener. Saltando subida de resultados."
            exit 0 # Salir con éxito para no fallar el job si es un fallo de autenticación
          fi

          # 1. Ajusta la ruta del archivo si tu Cucumber lo deja en otro sitio
          curl -s -X POST "https://xray.cloud.getxray.app/api/v2/import/execution/cucumber" \
            -H "Authorization: Bearer ${XRAY_TOKEN}" \
            -F "file=@target/cucumber.json"
