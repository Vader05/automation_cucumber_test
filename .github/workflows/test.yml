name: Run API Tests and Report to Xray

on:
  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub
  workflow_dispatch:      
  # Permite lanzarlo desde Jira/Xray vía API
  repository_dispatch:    

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Ejecutamos las pruebas y el plugin de Xray
      - name: Run Cucumber tests and Import Results
        # Usamos 'always()' para asegurar que este paso se ejecute incluso si los tests fallan, 
        # y así obtener el reporte de errores.
        if: always()
        env:
          # Estas variables de entorno son necesarias para que el plugin de Maven las lea 
          # (configuradas en tu pom.xml con ${env.XRAY_CLIENT_ID})
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        run: |
          chmod +x mvnw
          
          echo "Iniciando la ejecución de pruebas con el objetivo 'install'..."
          # El comando 'install' ejecuta la fase 'test', que a su vez ejecuta Surefire.
          # La fase 'post-integration-test' (donde configuraste el plugin Xray) se ejecuta después.
          ./mvnw clean install
          
          # Si el comando install falla (debido a fallos en los tests), 
          # forzamos la ejecución del plugin Xray para subir los resultados parciales.
          if [ $? -ne 0 ]; then
            echo "La ejecución de pruebas falló. Forzando la importación de resultados con el plugin de Xray..."
            # Forzamos la ejecución del goal 'import-results' del plugin Xray.
            ./mvnw com.xpandit.xray:xray-maven-plugin:3.5.0:import-results
          fi
