name: Run API Tests and Report to Xray

on:
  workflow_dispatch:        # Permite ejecuci√≥n manual desde GitHub UI
  repository_dispatch:      # Permite ejecuci√≥n remota desde Jira/Xray v√≠a API

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      # üì¶ 1Ô∏è‚É£ Descargar el c√≥digo del repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # ‚òï 2Ô∏è‚É£ Configurar Java (usa JDK 17)
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # üß™ 3Ô∏è‚É£ Ejecutar los tests de Cucumber
      - name: Run Cucumber tests
        id: run_tests
        continue-on-error: true
        run: |
          echo "Ejecutando pruebas con Maven..."
          chmod +x mvnw || true
          ./mvnw test -Dcucumber.plugin="json:target/cucumber.json"
          echo "Ejecuci√≥n de pruebas finalizada."

      # üîê 4Ô∏è‚É£ Obtener Token de Xray Cloud
      - name: Get Xray Token
        id: get_token
        env:
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        if: always()
        run: |
          echo "Obteniendo token de Xray Cloud..."
          RESPONSE=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
            -H "Content-Type: application/json" \
            -d "{\"client_id\": \"${XRAY_CLIENT_ID}\", \"client_secret\": \"${XRAY_CLIENT_SECRET}\"}")
          
          XRAY_TOKEN=$(echo "$RESPONSE" | tr -d '"')
          if [ -z "$XRAY_TOKEN" ]; then
            echo "‚ùå ERROR: No se pudo obtener el token de Xray."
            exit 1
          fi

          echo "‚úÖ Token obtenido correctamente."
          echo "XRAY_TOKEN=${XRAY_TOKEN}" >> $GITHUB_ENV

      # üì§ 5Ô∏è‚É£ Subir resultados a Xray Cloud
      - name: Upload Cucumber results to Xray (Cloud API v2)
        if: always()
        env:
          XRAY_TOKEN: ${{ env.XRAY_TOKEN }}
        run: |
          REPORT_FILE="target/cucumber.json"
          TEST_EXECUTION_KEY="P123-16"

          echo "Verificando archivo de resultados..."
          if [ ! -f "$REPORT_FILE" ]; then
            echo "‚ùå ERROR: No se encontr√≥ el archivo $REPORT_FILE"
            exit 1
          fi

          FILE_SIZE=$(wc -c < "$REPORT_FILE")
          echo "üìè Tama√±o del archivo de reporte: $FILE_SIZE bytes"

          echo "üìÑ Creando payload para Xray Cloud..."
          cat <<EOF > payload.json
          {
            "testExecutionKey": "${TEST_EXECUTION_KEY}",
            "info": {
              "project": "P123",
              "summary": "Resultados autom√°ticos desde GitHub Actions",
              "description": "Subida autom√°tica desde workflow run $(date -u)",
              "testEnvironments": ["staging"]
            },
            "tests": $(cat ${REPORT_FILE})
          }
          EOF

          echo "üì° Subiendo resultados a Xray Cloud (API v2)..."
          RESPONSE=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/import/execution" \
            -H "Authorization: Bearer ${XRAY_TOKEN}" \
            -H "Content-Type: application/json" \
            -d @payload.json)

          echo "=================================================="
          echo "üì§ RESPUESTA DE XRAY CLOUD:"
          echo "$RESPONSE"
          echo "=================================================="

          if echo "$RESPONSE" | grep -q '"error"'; then
            echo "‚ùå Error al subir resultados a Xray."
            exit 1
          else
            echo "‚úÖ Resultados subidos exitosamente a Xray Cloud."
          fi

