name: Run API Tests and Report to Xray

on:
  workflow_dispatch:      # Permite ejecuci√≥n manual desde GitHub UI
  repository_dispatch:    # Permite lanzarlo desde Jira/Xray v√≠a API

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      # üì¶ 1Ô∏è‚É£ Descargar el c√≥digo del repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # ‚òï 2Ô∏è‚É£ Configurar Java (usa JDK 17)
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # üß™ 3Ô∏è‚É£ Ejecutar los tests de Cucumber
      - name: Run Cucumber tests
        continue-on-error: true    # Permite continuar aunque falle alg√∫n test
        run: |
          chmod +x mvnw || true
          ./mvnw test

      # üîê 4Ô∏è‚É£ Obtener Token de Xray
      - name: Get Xray Token
        id: get_token
        env:
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        if: always()
        run: |
          echo "Obteniendo token de Xray..."
          XRAY_TOKEN=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
            -H "Content-Type: application/json" \
            -d "{\"client_id\": \"${XRAY_CLIENT_ID}\", \"client_secret\": \"${XRAY_CLIENT_SECRET}\"}" | tr -d '"')

          if [ -z "$XRAY_TOKEN" ]; then
            echo "ERROR: No se pudo obtener el token de Xray."
            exit 1
          fi

          echo "XRAY_TOKEN=${XRAY_TOKEN}" >> $GITHUB_ENV
          echo "Token obtenido correctamente."

        # üì§ 5Ô∏è‚É£ Subir resultados a Xray (Cloud)
      - name: Upload Cucumber results to Xray
        if: always()
        run: |
          REPORT_FILE="target/cucumber.json"
          TEST_EXECUTION_KEY="P123-14"   # Clave del Test Execution en Jira/Xray

          if [ -z "${XRAY_TOKEN}" ]; then
            echo "Error: XRAY_TOKEN no se pudo obtener. Saltando subida de resultados."
            exit 0
          fi

          if [ ! -f "$REPORT_FILE" ]; then
            echo "ERROR: No se encontr√≥ el archivo $REPORT_FILE"
            exit 1
          fi

          FILE_SIZE=$(wc -c < "$REPORT_FILE")
          echo "Tama√±o del archivo de reporte: $FILE_SIZE bytes."
          if [ "$FILE_SIZE" -lt 10 ]; then
            echo "ADVERTENCIA: El archivo parece vac√≠o o corrupto."
            exit 0
          fi

          echo "=================================================="
          echo "Contenido de $REPORT_FILE (DEBUG):"
          cat $REPORT_FILE
          echo "=================================================="

          echo "üì° Subiendo resultados a Xray Cloud (multipart)..."

          # ‚úÖ FIX: el campo 'info' debe incluir el tipo correctamente en multipart
          CURL_RESPONSE=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/import/execution/cucumber/multipart" \
            -H "Authorization: Bearer ${XRAY_TOKEN}" \
            -F "info={\"testExecutionKey\":\"${TEST_EXECUTION_KEY}\",\"summary\":\"Resultados autom√°ticos desde GitHub Actions\",\"description\":\"Subida autom√°tica desde workflow run $(date)\"};type=application/json" \
            -F "results=@${REPORT_FILE};type=application/json")

          echo "=================================================="
          echo "RESPUESTA DE XRAY:"
          echo "$CURL_RESPONSE"
          echo "=================================================="

